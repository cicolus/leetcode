from typing import List
from math import inf, isinf
from sys import setrecursionlimit

"""
    Given an array nums of integers, you can perform operations on the array.

    In each operation, you pick any nums[i] and delete it to earn nums[i] points. 
    After, you must delete every element equal to nums[i] - 1 or nums[i] + 1.
    
    You start with 0 points. Return the maximum number of points you can earn by 
    applying such operations.
    
    Example 1:
    
    Input: nums = [3, 4, 2]
    Output: 6
    
    Explanation: 
    Delete 4 to earn 4 points, consequently 3 is also deleted.
    Then, delete 2 to earn 2 points. 6 total points are earned.
    
    Example 2:
    
    Input: nums = [2, 2, 3, 3, 3, 4]
    Output: 9
    
    Explanation: 
    Delete 3 to earn 3 points, deleting both 2's and the 4.
    Then, delete 3 again to earn 3 points, and 3 again to earn 3 points.
    9 total points are earned.
    
    Note:
    
    The length of nums is at most 20000.
    Each element nums[i] is an integer in the range [1, 10000].
"""


class Solution:
    def deleteAndEarn(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        result = 0 # TODO: delete this line
        counter = {}
        for n in nums:
            if n in counter:
                counter[n] += 1
            else:
                counter[n] = 1
        print(counter)

        keys = list(sorted(counter.keys()))
        dp = {}
        def build_dp(i, j):
            if i > j:
                return 0
            if (i, j) in dp:
                return dp[(i, j)]
            if i == j:
                dp[(i, i)] = counter[keys[i]] * keys[i]
                return dp[(i, i)]
            max_gain = -inf
            for k in range(i, j + 1):
                gain_right = 0
                gain_left = 0
                gain = keys[k] * counter[keys[k]]
                if k + 1 <= j:
                    if keys[k + 1] - keys[k] == 1:
                        gain_right = build_dp(k + 2, j)
                    else:
                        gain_right = build_dp(k + 1, j)
                if k - 1 >= i:
                    if keys[k - 1] + 1 == keys[k]:
                        gain_left = build_dp(i, k - 2)
                    else:
                        gain_left = build_dp(i, k - 1)
                if gain + gain_right + gain_left > max_gain:
                    max_gain = gain + gain_right + gain_left
            dp[(i, j)] = max_gain
            return max_gain

        return build_dp(0, len(keys) - 1)


if __name__ == '__main__':
    test = Solution()
    nums_1 = [3, 4, 2]
    print(test.deleteAndEarn(nums_1))
    nums_2 = [2, 2, 3, 3, 3, 4]
    print(test.deleteAndEarn(nums_2))
    nums_3 = [8, 7, 3, 8, 1, 4, 10, 10, 10, 2]
    print(test.deleteAndEarn(nums_3))
    nums_4 = [8, 3, 4, 7, 6, 6, 9, 2, 5, 8, 2, 4, 9, 5, 9, 1, 5, 7, 1, 4]
    print(test.deleteAndEarn(nums_4))
    nums_5 = [31, 85, 48, 72, 97, 7, 94, 54, 84, 56, 39, 81, 6, 16, 34, 35, 48, 90, 95, 84, 4, 1, 20, 6, 15, 75, 65, 96, 39, 94,
     21, 6, 36, 50, 15, 9, 30, 34, 84, 37, 41, 83, 37, 7, 79, 5, 47, 5, 8, 25, 84, 45, 20, 52, 7, 89, 20, 93, 18, 93,
     53, 81, 21, 82, 23, 97, 2, 94, 39, 54, 75, 98, 70, 60, 62, 56, 15, 20, 8, 28, 59, 67, 2, 74, 2, 84, 13, 77, 89, 86,
     70, 10, 67, 100, 65, 1, 96, 3, 25, 19, 12, 57, 35, 1, 74, 85, 95, 24, 70, 68, 72, 46, 77, 36, 98, 42, 77, 55, 89,
     4, 96, 38, 46, 59, 90, 5, 48, 15, 84, 62, 14, 26, 55, 61, 77, 72, 80, 71, 100, 22, 93, 89, 90, 38, 80, 13, 98, 28,
     16, 97, 24, 47, 60, 63, 69, 69, 62, 39, 69, 12, 83, 32, 96, 100, 24, 27, 98, 10, 68, 17, 91, 30, 70, 79, 10, 2, 90,
     67, 41, 50, 19, 15, 76, 42, 64, 21, 65, 77, 10, 94, 35, 46, 21, 81, 55, 4, 79, 44, 89, 79, 16, 85, 96, 84, 8, 10,
     34, 86, 97, 38, 14, 88, 61, 26, 46, 17, 75, 52, 69, 67, 31, 54, 5, 42, 64, 40, 91, 38, 71, 41, 52, 86, 72, 27, 23,
     64, 25, 7, 92, 52, 6, 5, 62, 9, 52, 98, 49, 65, 27, 9, 25, 55, 89, 46, 92, 19, 23, 20, 69, 83, 90, 49, 83, 44, 75,
     8, 27, 96, 47, 16, 5, 31, 5, 51, 15, 85, 14, 25, 94, 18, 63, 14, 60, 64, 96, 65, 18, 31, 63, 47, 14, 91, 20, 60,
     35, 74, 99, 8, 83, 82, 73, 59, 88, 63, 85, 47, 43, 54, 85, 70, 88, 63, 50, 17, 42, 53, 38, 85, 88, 44, 1, 14, 50,
     37, 54, 62, 98, 83, 77, 29, 84, 10, 69, 47, 76, 57, 81, 99, 55, 62, 70, 84, 79, 87, 18, 95, 62, 82, 32, 83, 90, 82,
     17, 45, 9, 18, 49, 96, 60, 29, 82, 92, 82, 78, 9, 59, 57, 13, 62, 97, 13, 39, 52, 51, 70, 38, 11, 27, 92, 38, 21,
     97, 22, 4, 90, 30, 80, 45, 49, 95, 89, 4, 34, 30, 70, 34, 74, 15, 85, 22, 71, 56, 58, 83, 15, 29, 49, 15, 92, 98,
     5, 48, 18, 75, 15, 37, 87, 21, 76, 80, 75, 17, 54, 37, 53, 73, 63, 4, 65, 99, 40, 19, 8, 61, 12, 53, 23, 3, 77, 47,
     21, 43, 96, 2, 65, 83, 92, 93, 99, 86, 97, 63, 42, 7, 73, 77, 74, 4, 97, 32, 55, 51, 70, 58, 52, 63, 93, 65, 100,
     59, 79, 79, 8, 68, 22, 86, 70, 57, 51, 79, 11, 6, 40, 58, 41, 18, 84, 86, 35, 41, 21, 96, 82, 54, 20, 72, 29, 93,
     29, 7, 87, 27, 64, 77, 62, 57, 63, 54, 40, 68, 61, 83, 1, 31, 21, 35, 70, 41, 13, 60, 68, 24, 26, 35, 20, 68, 46,
     11, 21, 31, 37, 34, 47, 71, 61, 60, 44, 72, 22, 98, 11, 2, 44, 86, 54, 54, 82, 64, 22, 21, 12, 11, 68, 10, 65, 66,
     98, 7, 68, 9, 10, 62, 58, 36, 46, 54, 13, 41, 84, 35, 66, 32, 76, 36, 5, 84, 16, 1, 87, 65, 32, 60, 36, 80, 53, 20,
     59, 30, 70, 91, 93, 33, 44, 66, 94, 15, 73, 57, 72, 46, 28, 99, 62, 16, 79, 13, 32, 72, 11, 13, 33, 80, 24, 80, 70,
     29, 42, 46, 10, 92, 44, 54, 47, 87, 48, 27, 7, 13, 5, 59, 4, 42, 11, 58, 49, 92, 57, 95, 38, 14, 14, 33, 67, 55,
     55, 67, 91, 73, 20, 70, 95, 32, 26, 10, 69, 7, 15, 63, 68, 39, 39, 93, 20, 44, 27, 35, 7, 51, 27, 61, 70, 92, 16,
     72, 67, 42, 40, 85, 13, 26, 62, 41, 20, 7, 41, 97, 42, 60, 11, 73, 14, 68, 43, 15, 97, 43, 28, 94, 79, 45, 65, 9,
     92, 17, 98, 74, 81, 89, 91, 13, 62, 54, 42, 72, 31, 34, 59, 40, 17, 4, 74, 74, 12, 70, 8, 24, 82, 36, 10, 40, 6,
     64, 27, 53, 48, 89, 85, 87, 70, 100, 12, 35, 14, 41, 97, 79, 53, 43, 85, 2, 38, 41, 26, 44, 44, 57, 75, 35, 63, 59,
     30, 23, 7, 93, 65, 64, 2, 76, 86, 41, 24, 89, 15, 96, 60, 100, 96, 11, 82, 34, 47, 50, 37, 92, 69, 82, 40, 81, 79,
     59, 64, 8, 41, 76, 69, 61, 91, 36, 56, 54, 95, 45, 69, 47, 62, 27, 27, 30, 90, 85, 26, 11, 78, 15, 69, 51, 32, 94,
     39, 5, 29, 73, 2, 66, 80, 27, 94, 63, 59, 33, 17, 42, 17, 91, 90, 46, 33, 52, 30, 34, 74, 96, 96, 74, 82, 49, 51,
     16, 50, 23, 88, 66, 41, 68, 74, 66, 24, 37, 9, 53, 18, 15, 34, 40, 35, 61, 87, 68, 22, 50, 82, 80, 71, 11, 1, 8,
     65, 82, 30, 35, 80, 15, 23, 24, 39, 6, 13, 53, 27, 80, 34, 95, 98, 73, 72, 32, 92, 53, 43, 13, 61, 95, 77, 40, 87,
     85, 83, 8, 69, 3, 18, 35, 25, 77, 88, 78, 92, 33, 71, 25, 58, 97, 83, 97, 97, 32, 10, 28, 23, 57, 99, 67, 52, 38,
     1, 63, 61, 2, 56, 29, 21, 66, 2, 54, 55, 58, 73, 27, 9, 1, 96, 97, 78, 52, 2, 85, 44, 65, 84, 64, 80, 61, 54, 40,
     28, 66, 41, 61, 86, 3, 11, 64, 33, 11, 28, 85, 4, 23, 15, 88, 47, 77, 73, 87, 57, 59, 17, 5, 20, 75, 29, 95, 39,
     23, 67, 63, 77, 85, 72, 80]